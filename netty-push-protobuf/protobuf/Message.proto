syntax = "proto2";
package message;
option java_package = "io.github.opensabe.alive.protobuf";
option java_outer_classname = "Message";

//心跳
message HeartBeat {
	required int32 requestId = 1 ;
	optional int64 messageId = 2;
	optional bool ack = 3;
}

//backend
message Publish {
    required int32 requestId = 1;
    required int32 productCode = 2;     //产品标识:表示是哪个产品
    required string topic = 3;        //分组名称:要把消息发送到哪个组
    optional bytes body = 4;            //消息内容:发送的真正的消息
	optional PushType pushType = 5[default=GROUP]; //推送消息的类型 单推还是群推
    optional string deviceId = 6;         // 设备ID
    optional string accountId = 7;
    optional int64 expiry = 8[default=0];
    optional int64 messageId = 9;
    optional bool ack = 10;
}

message AuthBackend {
    required int32 requestId = 1 ;
    required int32 productCode = 2;
    required string authToken = 3 ;    //签名后的认证消息
    optional string subSys = 4 ;
    optional string name = 5 ;
    optional UAction uAction = 6;
}

message SendSetCommand{
    required int32 requestId = 1 ;
    optional string cmdLine = 2 ;

}

// 查询消息是否送达
message Query {
    required int32 requestId = 1;
    required int32 productCode = 2;       //产品标识:表示是哪个产品
    required string topic = 3;            //分组名称:要把消息发送到哪个组
	optional PushType pushType = 4;       //推送消息的类型 单推还是群推
    optional string deviceId = 5;         // 设备ID
    optional string accountId = 6;        // 账号ID
}

message UStateQuery{
    required int32 requestId = 1;
    required int32 productCode = 2;
    optional string deviceId = 3;
}

message UStateResponse{
    required int32 requestId = 1;
    required int32 productCode = 2;
    optional string deviceId = 3;
    optional bool online = 4;
    optional string topics = 5;
}

message UActionNotice{
    required int32 requestId = 1;
    optional bool online = 2;
    optional string deviceId = 3;
    optional string accountId = 4;
    optional SubType subType = 5;
    optional PushType pushType = 6;
    optional string topic = 7;
}

message ChatAuth{
     required int32 requestId = 1;
     optional string deviceId = 2;
     optional string authStr = 3;
     optional bool type = 4[default=true];
}

//client
//requestId用于唯一标识一次请求,同一个tcp连接要使用同一个序列生成器
message RegDev {
    required int32 requestId =1 ;
    required int32 productCode=2;   //产品标识:表示是哪个产品
    required string deviceId = 3 ;   //设备id ,表示一台设备
    required DevType devType = 4;    //设备类型
    optional string token = 5;     //后台校验码
}

//未注册的设备发该消息会返回错误
message Subscribe {
    required int32 requestId = 1;
    required string topic = 2;
    required SubType subType = 3;
    optional PushType pushType = 6[default=GROUP]; //订阅消息的类型
    optional string accountId = 4;
}

message ChatMsg{
    required int32 requestId = 1;
    required int32 productCode = 2;
    optional string from = 3;
    optional string to = 4;
    optional bytes msg = 5;
    optional int64 expiry = 6;
    optional TargetType fromType = 7;
    optional TargetType toType = 8;
    optional int64 messageId = 9;
    optional bool ack = 10;
}

message AuthRequest{
    required int32 requestId = 1;
    required string deviceId = 2;
    optional string to = 3;
    optional string authStr = 4;
    optional string sign = 5;
}

message ACK{
    required int32 requestId = 1;
    optional int64 messageId = 2;
}

message Closed{
     optional string deviceId = 1;
}

//发送给client的消息
message RetMsg {
    required bytes body = 1;
    optional string topic = 2;
    optional PushType pushType = 3[default=GROUP];
    optional int64 messageId = 4;
    optional bool ack = 5;
}

//对收到请求的响应
message Response {
    required int32 requestId = 1;
    required RetCode retCode = 2;
	optional string rightHost = 3;
    optional int32 sendNum = 4;
    optional int64 messageId = 5;
    optional bool ack = 6;
    optional string extra = 7;
}

//用户操作枚举类
enum UAction {
    REG = 1;
    SUB_TOPIC = 2;
    BOTH = 3;
    NONE = 4;
}

//主题的订阅/取消
enum SubType {
    SUB = 1;
    UNSUB = 2;
}

//设备类型
enum DevType {
    IOS = 1;
    ANDROID = 2;
    WP = 3;
    WEB = 4;
}

//推送类型
enum PushType {
	GROUP = 1;
	SPECIAL = 2;
	MULTI = 3;
}

//目标类型
enum TargetType{
    DEVICE = 1;
	ACCOUNT = 2;
	BACKEND = 3;
	NODE = 4;
}

// 错误码
enum RetCode {
    SUCCESS = 1;
    FAIL= 2;
    CACHED= 3;
    PARAM_ERR= 4;
    NO_AUTH= 5;
}